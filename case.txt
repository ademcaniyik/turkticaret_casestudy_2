Ademcan


PHP API ve React ile Todo Uygulaması Case Çalışması
Proje Tanımı
Bu case çalışması, yazılım geliştirme becerilerinizi kapsamlı bir şekilde değerlendirmek amacıyla tasarlanmıştır. Sizden, modern web geliştirme prensiplerini ve iyi kod yazma pratiklerini uygulayarak tam işlevsel bir Todo Uygulaması geliştirmeniz beklenmektedir. Proje, back-end için PHP ile geliştirilmiş bir RESTful API ve front-end için React.js ile oluşturulmuş bir kullanıcı arayüzünden oluşacaktır.
Bu çalışma, teknik bilginizi, problem çözme yeteneğinizi, kod kalitesi anlayışınızı ve modern yazılım geliştirme araçlarını kullanma becerinizi göstermenize olanak tanıyacaktır.
Zaman Çizelgesi
•	Teslim Tarihi: Bu dökümanı aldıktan sonra 7 iş günü içinde
•	Kod İncelemesi: Teslimden sonra 3-5 iş günü içerisinde
•	Sonuçların Bildirilmesi: Kod incelemesinden sonra 2 iş günü içerisinde
Teknik Gereksinimler
Back-end (PHP API) Detaylı Gereksinimleri
1. Veritabanı Tasarımı ve Yönetimi
•	Veritabanı: MySQL 8.0+ veya MariaDB 10.5+
•	ORM Kullanımı: Tercihen Eloquent veya Doctrine
•	Migrasyon Scriptleri: Veritabanı şemasını oluşturmak için migrasyon dosyaları
•	Seed Data: Test için örnek veriler içeren seed dosyaları
Ana Tablo (todos):
CREATE TABLE todos (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    status ENUM('pending', 'in_progress', 'completed', 'cancelled') DEFAULT 'pending',
    priority ENUM('low', 'medium', 'high') DEFAULT 'medium',
    due_date DATETIME NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    deleted_at TIMESTAMP NULL
);
Bonus Kategori Tablosu (categories):
CREATE TABLE categories (
    id INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100) NOT NULL,
    color VARCHAR(7) DEFAULT '#FFFFFF',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

CREATE TABLE todo_category (
    todo_id INT UNSIGNED,
    category_id INT UNSIGNED,
    PRIMARY KEY (todo_id, category_id),
    FOREIGN KEY (todo_id) REFERENCES todos(id) ON DELETE CASCADE,
    FOREIGN KEY (category_id) REFERENCES categories(id) ON DELETE CASCADE
);
//////////////////77
2. RESTful API Tasarımı
PHP Gereksinimleri: PHP 8.1+ kullanmanız beklenmektedir. Aşağıdaki seçeneklerden birini tercih edebilirsiniz:
1.	Pure PHP ile Geliştirme: Framework kullanmadan, kendi MVC yapınızı oluşturabilirsiniz
–	OOP prensiplerini uygulamanız beklenmektedir
–	Sınıf autoloading için PSR-4 standardı kullanılmalıdır
–	Composer kullanımı tavsiye edilir (dependency management için)
–	Kendi router yapınızı oluşturmanız gerekecektir
2.	Framework Kullanımı: Tercihen aşağıdaki frameworklerden birini kullanabilirsiniz
–	Laravel 10+
API Uç Noktaları:
1.	Todo İşlemleri
–	GET /api/todos - Tüm todo’ları listele (sayfalama desteği ile)
•	Query parametreleri:
–	page: Sayfa numarası (varsayılan: 1)
–	limit: Sayfa başına kayıt sayısı (varsayılan: 10, maksimum: 50)
–	sort: Sıralama alanı (örn. ‘created_at’, ‘due_date’, ‘priority’)
–	order: Sıralama yönü (‘asc’ veya ‘desc’)
–	status: Filtre için durum
–	priority: Filtre için öncelik
–	GET /api/todos/{id} - Belirli bir todo’yu getir
–	POST /api/todos - Yeni bir todo oluştur
–	PUT /api/todos/{id} - Mevcut bir todo’yu güncelle
–	PATCH /api/todos/{id}/status - Sadece todo durumunu güncelle
–	DELETE /api/todos/{id} - Bir todo’yu sil (soft delete)
–	GET /api/todos/search - Todo’ları başlık veya açıklamaya göre ara
•	Query parametresi: q: Arama terimi
2.	Kategori İşlemleri (Bonus)
–	GET /api/categories - Tüm kategorileri listele
–	GET /api/categories/{id} - Belirli bir kategoriyi getir
–	POST /api/categories - Yeni bir kategori oluştur
–	PUT /api/categories/{id} - Mevcut bir kategoriyi güncelle
–	DELETE /api/categories/{id} - Bir kategoriyi sil
–	GET /api/categories/{id}/todos - Belirli bir kategoriye ait todo’ları listele
3.	İstatistik Uç Noktaları (Bonus)
–	GET /api/stats/todos - Durum bazında todo sayılarını getir
–	GET /api/stats/priorities - Öncelik bazında todo sayılarını getir
3. API Tasarım Prensipleri
•	HTTP Durum Kodları: Uygun HTTP durum kodlarının kullanımı
–	200: Başarılı istekler
–	201: Başarılı oluşturma
–	204: İçerik yok (silme işlemlerinde)
–	400: Geçersiz istek
–	404: Kaynak bulunamadı
–	422: Doğrulama hataları
–	500: Sunucu hatası
•	Yanıt Formatları: Tutarlı JSON yanıt yapısı
{
  "status": "success|error",
  "message": "İşlem açıklaması (opsiyonel)",
  "data": { ... },
  "meta": {
    "pagination": {
      "total": 100,
      "per_page": 10,
      "current_page": 1,
      "last_page": 10,
      "from": 1,
      "to": 10
    }
  },
  "errors": [ ... ] // Hata durumunda
}
•	Doğrulama Kuralları:
–	Todo başlığı: Zorunlu, 3-100 karakter
–	Açıklama: Opsiyonel, maksimum 500 karakter
–	Durum: Geçerli enum değerleri
–	Öncelik: Geçerli enum değerleri
–	Bitiş tarihi: Geçerli tarih formatı, bugünden sonraki bir tarih
•	Güvenlik Önlemleri:
–	CORS (Cross-Origin Resource Sharing) konfigürasyonu
–	Input sanitization ve validation
–	Rate limiting
–	XSS ve CSRF koruması
4. Kod Organizasyonu ve Mimari
•	Repository Pattern: Veritabanı işlemleri için repositoryler
•	Service Layer: İş mantığı için servis sınıfları
•	Dependency Injection: Bağımlılık enjeksiyonu kullanımı
•	Middleware: İstek işlemeden önce çalışacak ara yazılımlar
•	Exception Handling: Merkezi hata yakalama ve işleme
•	Logging: Kritik operasyonların loglanması
Front-end (React) Detaylı Gereksinimleri
1. Proje Yapısı ve Teknolojiler
•	React Sürümü: React 18.0+
•	State Yönetimi: Redux Toolkit veya Context API
•	Routing: React Router v6+
•	Form Yönetimi: Formik veya React Hook Form
•	Validasyon: Yup veya Zod
•	HTTP İstekleri: Axios
•	UI Kütüphanesi:
–	Tailwind CSS (tercih edilen)
–	MUI (Material-UI)
–	Ant Design
–	Bootstrap
2. Uygulama Özellikleri ve Komponentler
Ana Sayfalar:
1.	Dashboard
–	Özet istatistikler (duruma göre todo sayıları)
–	Yaklaşan bitiş tarihleri olan todo’lar
–	Hızlı durum değiştirme seçenekleri
2.	Todo Listesi Sayfası
–	Filtreleme ve arama özellikleri
–	Sıralama seçenekleri
–	Sayfalama kontrolü
–	Her todo için hızlı durum değiştirme
–	Her todo için düzenleme ve silme işlemleri
3.	Todo Detay/Düzenleme Sayfası
–	Tüm todo alanları için form
–	Kategori seçimi (çoklu seçim)
–	Bitiş tarihi seçimi için tarih seçici
–	Form doğrulama
4.	Kategori Yönetim Sayfası (Bonus)
–	Kategori listesi
–	Kategori ekle/düzenle/sil işlemleri
–	Kategorilere renk atama
Komponentler:
1.	TodoList: Todo’ları listelemek için tablo veya grid görünümü
2.	TodoItem: Tek bir todo’yu göstermek için kart veya liste öğesi
3.	TodoForm: Todo oluşturma/düzenleme formu
4.	TodoFilter: Filtreleme, arama ve sıralama kontrollerini içeren komponent
5.	StatusBadge: Todo durumunu göstermek için renkli rozet
6.	PriorityIndicator: Öncelik seviyesini göstermek için gösterge
7.	Pagination: Sayfalama kontrolleri
8.	CategorySelector: Kategori seçim komponenti (çoklu seçim)
9.	ConfirmationModal: Silme işlemleri için onay modalı
3. Kullanıcı Deneyimi ve Arayüz Tasarımı
•	Responsive Tasarım: Mobil, tablet ve masaüstü görünümleri için uyumluluk
•	Tema Desteği: Açık/koyu tema geçişi
•	Animasyonlar: Geçişlerde ve durum değişimlerinde uygun animasyonlar
•	Loading States: İstek sırasında yükleme göstergeleri
•	Empty States: Veri olmadığında uygun gösterimler
•	Error States: Hata durumlarında uygun mesajlar
•	Toast Notifications: İşlem sonuçları için bildirimler
4. Kod Yapısı ve Kalitesi
•	Komponent Yapısı: Akıllı (container) ve saf (presentation) komponentleri
•	Hook Kullanımı: React Hook’ların etkin kullanımı
•	Kod Bölme (Code Splitting): Büyük bileşenler için lazy loading
•	Performans Optimizasyonu: Gereksiz yeniden renderları önlemek için memo ve useCallback
•	Özel Hook’lar: Yeniden kullanılabilir mantık için özel hook’lar
•	TypeScript (Bonus): Tip güvenliği için TypeScript kullanımı
Bonus Özellikler (İsteğe Bağlı)
1.	Kimlik Doğrulama ve Yetkilendirme
–	Kullanıcı kaydı ve girişi
–	JWT tabanlı kimlik doğrulama
–	Role-based yetkilendirme (admin, normal kullanıcı)
–	Her kullanıcının kendi todo’larını görmesi
2.	Gerçek Zamanlı Güncellemeler
–	WebSocket ile gerçek zamanlı güncellemeler
–	Birden fazla kullanıcı aynı todo üzerinde çalışırken senkronizasyon
3.	Offline Modu
–	Service Workers ile çevrimdışı çalışma desteği
–	IndexedDB ile yerel veri depolama
–	Çevrimiçi olunduğunda otomatik senkronizasyon
4.	İleri Düzey UI Özellikleri
–	Sürükle ve bırak ile durum değiştirme (Kanban board)
–	Todo’lar için etiketler ve renkli işaretler
–	Markdown desteği ile zengin metin formatı
–	Dosya ekleri (API’de gerekli değişikliklerle)
5.	Progressive Web App (PWA)
–	Ana ekrana eklenebilir
–	Push bildirimleri
–	Splash screen ve app icons
6.	Kapsamlı Test
–	Unit testler (PHPUnit ve Jest/React Testing Library)
–	API entegrasyon testleri
–	End-to-end testler (Cypress veya Playwright)
–	Test coverage raporları
7.	CI/CD Pipeline
–	GitHub Actions veya GitLab CI ile otomatik test ve dağıtım
–	Docker entegrasyonu
Örnek API İstek ve Yanıtları
1. Tüm Todo’ları Listeleme
İstek:
GET /api/todos?page=1&limit=10&sort=due_date&order=asc&status=pending
Yanıt:
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "API Dokümantasyonunu Hazırla",
      "description": "Swagger veya Postman ile API dokümantasyonu oluştur",
      "status": "pending",
      "priority": "high",
      "due_date": "2025-05-10T18:00:00",
      "created_at": "2025-05-01T10:00:00",
      "updated_at": "2025-05-01T10:00:00",
      "categories": [
        {
          "id": 1,
          "name": "Backend",
          "color": "#4A90E2"
        }
      ]
    },
    {
      "id": 2,
      "title": "React Komponentlerini Oluştur",
      "description": "Todo ve form komponentlerini geliştir",
      "status": "pending",
      "priority": "medium",
      "due_date": "2025-05-11T18:00:00",
      "created_at": "2025-05-01T11:30:00",
      "updated_at": "2025-05-01T11:30:00",
      "categories": [
        {
          "id": 2,
          "name": "Frontend",
          "color": "#50E3C2"
        }
      ]
    }
  ],
  "meta": {
    "pagination": {
      "total": 25,
      "per_page": 10,
      "current_page": 1,
      "last_page": 3,
      "from": 1,
      "to": 10
    }
  }
}
2. Yeni Todo Oluşturma
İstek:
POST /api/todos
Content-Type: application/json

{
  "title": "Veritabanı Şemasını Tasarla",
  "description": "Todo uygulaması için gerekli tabloları ve ilişkileri tasarla",
  "status": "pending",
  "priority": "high",
  "due_date": "2025-05-05T18:00:00",
  "category_ids": [1, 3]
}
Yanıt:
{
  "status": "success",
  "message": "Todo başarıyla oluşturuldu",
  "data": {
    "id": 3,
    "title": "Veritabanı Şemasını Tasarla",
    "description": "Todo uygulaması için gerekli tabloları ve ilişkileri tasarla",
    "status": "pending",
    "priority": "high",
    "due_date": "2025-05-05T18:00:00",
    "created_at": "2025-05-02T09:15:00",
    "updated_at": "2025-05-02T09:15:00",
    "categories": [
      {
        "id": 1,
        "name": "Backend",
        "color": "#4A90E2"
      },
      {
        "id": 3,
        "name": "Database",
        "color": "#F5A623"
      }
    ]
  }
}
3. Todo’yu Güncelleme
İstek:
PUT /api/todos/3
Content-Type: application/json

{
  "title": "Veritabanı Şemasını Tasarla ve Migrasyonları Oluştur",
  "description": "Todo uygulaması için gerekli tabloları, ilişkileri ve migrasyon dosyalarını hazırla",
  "status": "in_progress",
  "priority": "high",
  "due_date": "2025-05-06T18:00:00",
  "category_ids": [1, 3]
}
Yanıt:
{
  "status": "success",
  "message": "Todo başarıyla güncellendi",
  "data": {
    "id": 3,
    "title": "Veritabanı Şemasını Tasarla ve Migrasyonları Oluştur",
    "description": "Todo uygulaması için gerekli tabloları, ilişkileri ve migrasyon dosyalarını hazırla",
    "status": "in_progress",
    "priority": "high",
    "due_date": "2025-05-06T18:00:00",
    "created_at": "2025-05-02T09:15:00",
    "updated_at": "2025-05-02T10:30:00",
    "categories": [
      {
        "id": 1,
        "name": "Backend",
        "color": "#4A90E2"
      },
      {
        "id": 3,
        "name": "Database",
        "color": "#F5A623"
      }
    ]
  }
}
4. Todo Durumunu Güncelleme
İstek:
PATCH /api/todos/3/status
Content-Type: application/json

{
  "status": "completed"
}
Yanıt:
{
  "status": "success",
  "message": "Todo durumu başarıyla güncellendi",
  "data": {
    "id": 3,
    "status": "completed",
    "updated_at": "2025-05-02T14:45:00"
  }
}
5. Todo’yu Silme
İstek:
DELETE /api/todos/3
Yanıt:
{
  "status": "success",
  "message": "Todo başarıyla silindi"
}
6. Todo İstatistiklerini Alma (Bonus)
İstek:
GET /api/stats/todos
Yanıt:
{
  "status": "success",
  "data": {
    "pending": 10,
    "in_progress": 5,
    "completed": 15,
    "cancelled": 2,
    "total": 32,
    "overdue": 3
  }
}
Proje Organizasyonu
Back-end Klasör Yapısı
Pure PHP Örneği:
/src
  /Controllers
    TodoController.php
    CategoryController.php
    StatsController.php
  /Models
    Todo.php
    Category.php
  /Services
    TodoService.php
    CategoryService.php
  /Database
    Database.php
    QueryBuilder.php
  /Validation
    Validator.php
  /Helpers
    Response.php
    Router.php
  /Exceptions
    CustomExceptionHandler.php
/config
  database.php
  app.php
/public
  index.php
  .htaccess
/tests
  /Unit
  /Integration
Laravel Örneği:
/app
  /Http
    /Controllers
      TodoController.php
      CategoryController.php
      StatsController.php
    /Requests
      StoreTodoRequest.php
      UpdateTodoRequest.php
      ...
    /Resources
      TodoResource.php
      CategoryResource.php
  /Models
    Todo.php
    Category.php
  /Repositories
    TodoRepository.php
    CategoryRepository.php
  /Services
    TodoService.php
    CategoryService.php
  /Exceptions
    CustomExceptionHandler.php
/database
  /migrations
  /seeds
/routes
  api.php
/tests
  /Feature
  /Unit
Front-end Klasör Yapısı (React)
/src
  /components
    /common
      Button.jsx
      Card.jsx
      Modal.jsx
      ...
    /todo
      TodoList.jsx
      TodoItem.jsx
      TodoForm.jsx
      TodoFilter.jsx
      ...
    /category
      CategoryList.jsx
      CategoryForm.jsx
      ...
  /pages
    Dashboard.jsx
    TodoListPage.jsx
    TodoDetailPage.jsx
    ...
  /hooks
    useTodos.js
    useCategories.js
    ...
  /services
    api.js
    todoService.js
    categoryService.js
    ...
  /store
    /slices
      todoSlice.js
      categorySlice.js
      ...
    store.js
  /utils
    formatters.js
    validators.js
    ...
  /assets
    /styles
    /images
  App.jsx
  index.jsx
/public
  index.html
  ...
Değerlendirme Kriterleri
Projeniz aşağıdaki kriterlere göre detaylı bir şekilde değerlendirilecektir:
1.	Kod Kalitesi ve Mimari (35%)
–	Temiz, okunabilir ve tutarlı kod yazımı
–	SOLID prensiplerine uygunluk
–	Uygun tasarım kalıplarının kullanımı
–	Kod organizasyonu ve modülerlik
–	Hata yönetimi ve güvenlik önlemleri
–	DRY (Don’t Repeat Yourself) prensibine uygunluk
2.	İşlevsellik ve Özellikler (30%)
–	Temel gereksinimlerin eksiksiz uygulanması
–	API uç noktalarının doğru çalışması
–	Front-end komponentlerinin beklendiği gibi davranması
–	Performans ve optimizasyon
–	Kullanıcı deneyimi ve arayüz tasarımı
3.	Teknik Beceri ve Yenilikçilik (20%)
–	Modern PHP ve JavaScript özelliklerinin kullanımı
–	Framework ve kütüphanelerin etkin kullanımı
–	Problem çözme yaklaşımı
–	Bonus özellikler ve yaratıcı çözümler
4.	Test ve Kalite Güvencesi (10%)
–	Birim testlerinin varlığı ve kapsamı
–	API testleri
–	Edge case’lerin ele alınması
–	Kod coverage
5.	Dokümantasyon ve Sunum (5%)
–	README ve diğer dokümantasyon kalitesi
–	API dokümantasyonu
–	Kurulum ve çalıştırma talimatları
–	Kod içi yorumlar ve dokümantasyon
Teslim Gereksinimleri
1.	GitHub Reposu
–	Public veya bize erişim verilen private bir repo
–	Anlamlı commit mesajları
–	Repoyu forklayarak değil, sıfırdan oluşturarak çalışın
2.	README Dosyası
–	Proje açıklaması ve özellikleri
–	Teknoloji stack’i
–	Kurulum adımları (hem back-end hem front-end için)
–	Çalıştırma talimatları
–	API dokümantasyonu (veya dokümantasyona link)
–	Örnek kullanım senaryoları
–	Bonus olarak eklenen özellikler
3.	Çalışır Demo (İsteğe Bağlı)
–	Heroku, Vercel, Netlify gibi platformlarda çalışan bir demo
4.	Teslim E-postası
–	Konu: “Todo App Case Study - [Adınız Soyadınız]”
–	GitHub repo linki
–	Varsa demo linki
–	Projede kullanılan teknolojilerin kısa özeti
–	Eklemek istediğiniz notlar veya açıklamalar
Proje Geliştirme İpuçları
1.	Önerilen Yaklaşım
–	Önce veritabanı şemasını tasarlayın
–	Back-end API’sini geliştirin ve test edin
–	Front-end için komponentleri ve temel işlevselliği oluşturun
–	UI/UX detaylarını ve ek özellikleri ekleyin
–	Test ve dokümantasyon ile bitirin
2.	Veritabanı İlişkileri
–	Todo-Category ilişkisini many-to-many olarak tasarlayın
–	Bonus: User-Todo ilişkisini one-to-many olarak tasarlayın
3.	Backend İpuçları
–	Pure PHP Kullanıyorsanız:
•	Kendi routing mekanizmanızı oluşturun (URI path’lerini controller metodlarına bağlayan)
•	Temiz bir klasör yapısı oluşturun (Controllers, Models, Services vb.)
•	PDO veya mysqli kullanarak güvenli veritabanı işlemleri yapın
•	Cross-site scripting (XSS) ve SQL injection’a karşı önlemler alın
•	JSON yanıtlarını oluşturmak için helper fonksiyonları yazın
–	Framework Kullanıyorsanız:
•	Repository pattern kullanarak veri erişim katmanını servis katmanından ayırın
•	Form Request sınıfları ile doğrulama kurallarını uygulayın
•	API Resource sınıfları ile yanıt formatını standardize edin
•	Middleware kullanarak CORS, rate limiting vb. önlemleri uygulayın
4.	Frontend İpuçları
–	Custom hook’lar kullanarak API çağrı mantığını ayırın
–	Context API veya Redux ile global state yönetimi sağlayın
–	Form yönetimi için Formik veya React Hook Form kullanın
–	Error boundary’ler ile hata yönetimini iyileştirin
