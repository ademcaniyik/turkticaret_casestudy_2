
3.	Backend İpuçları
–	Pure PHP Kullanıyorsanız:
•	Kendi routing mekanizmanızı oluşturun (URI path’lerini controller metodlarına bağlayan)
•	Temiz bir klasör yapısı oluşturun (Controllers, Models, Services vb.)
•	PDO veya mysqli kullanarak güvenli veritabanı işlemleri yapın
•	Cross-site scripting (XSS) ve SQL injection’a karşı önlemler alın
•	JSON yanıtlarını oluşturmak için helper fonksiyonları yazın



Teknik Gereksinimler
Back-end (PHP API) Detaylı Gereksinimleri
1. Veritabanı Tasarımı ve Yönetimi
•	Veritabanı: MySQL 8.0+ veya MariaDB 10.5+
•	ORM Kullanımı: Tercihen Eloquent veya Doctrine
•	Migrasyon Scriptleri: Veritabanı şemasını oluşturmak için migrasyon dosyaları
•	Seed Data: Test için örnek veriler içeren seed dosyaları

2. RESTful API Tasarımı
PHP Gereksinimleri: PHP 8.1+ kullanmanız beklenmektedir. Aşağıdaki seçeneklerden birini tercih edebilirsiniz:
1.	Pure PHP ile Geliştirme: Framework kullanmadan, kendi MVC yapınızı oluşturabilirsiniz
–	OOP prensiplerini uygulamanız beklenmektedir
–	Sınıf autoloading için PSR-4 standardı kullanılmalıdır
–	Composer kullanımı tavsiye edilir (dependency management için)
–	Kendi router yapınızı oluşturmanız gerekecektir

3. API Tasarım Prensipleri
•	HTTP Durum Kodları: Uygun HTTP durum kodlarının kullanımı
–	200: Başarılı istekler
–	201: Başarılı oluşturma
–	204: İçerik yok (silme işlemlerinde)
–	400: Geçersiz istek
–	404: Kaynak bulunamadı
–	422: Doğrulama hataları
–	500: Sunucu hatası


•	Yanıt Formatları: Tutarlı JSON yanıt yapısı
{
  "status": "success|error",
  "message": "İşlem açıklaması (opsiyonel)",
  "data": { ... },
  "meta": {
    "pagination": {
      "total": 100,
      "per_page": 10,
      "current_page": 1,
      "last_page": 10,
      "from": 1,
      "to": 10
    }
  },
  "errors": [ ... ] // Hata durumunda
}




•	Doğrulama Kuralları:
–	Todo başlığı: Zorunlu, 3-100 karakter
–	Açıklama: Opsiyonel, maksimum 500 karakter
–	Durum: Geçerli enum değerleri
–	Öncelik: Geçerli enum değerleri
–	Bitiş tarihi: Geçerli tarih formatı, bugünden sonraki bir tarih
•	Güvenlik Önlemleri:
–	CORS (Cross-Origin Resource Sharing) konfigürasyonu
–	Input sanitization ve validation
–	Rate limiting
–	XSS ve CSRF koruması
4. Kod Organizasyonu ve Mimari
•	Repository Pattern: Veritabanı işlemleri için repositoryler
•	Service Layer: İş mantığı için servis sınıfları
•	Dependency Injection: Bağımlılık enjeksiyonu kullanımı
•	Middleware: İstek işlemeden önce çalışacak ara yazılımlar
•	Exception Handling: Merkezi hata yakalama ve işleme
•	Logging: Kritik operasyonların loglanması




Bonus Özellikler (İsteğe Bağlı)
1.	Kimlik Doğrulama ve Yetkilendirme
–	Kullanıcı kaydı ve girişi
–	JWT tabanlı kimlik doğrulama
–	Role-based yetkilendirme (admin, normal kullanıcı)
–	Her kullanıcının kendi todo’larını görmesi
2.	Gerçek Zamanlı Güncellemeler
–	WebSocket ile gerçek zamanlı güncellemeler
–	Birden fazla kullanıcı aynı todo üzerinde çalışırken senkronizasyon
3.	Offline Modu
–	Service Workers ile çevrimdışı çalışma desteği
–	IndexedDB ile yerel veri depolama
–	Çevrimiçi olunduğunda otomatik senkronizasyon
4.	İleri Düzey UI Özellikleri
–	Sürükle ve bırak ile durum değiştirme (Kanban board)
–	Todo’lar için etiketler ve renkli işaretler
–	Markdown desteği ile zengin metin formatı
–	Dosya ekleri (API’de gerekli değişikliklerle)
5.	Progressive Web App (PWA)
–	Ana ekrana eklenebilir
–	Push bildirimleri
–	Splash screen ve app icons
6.	Kapsamlı Test
–	Unit testler (PHPUnit ve Jest/React Testing Library)
–	API entegrasyon testleri
–	End-to-end testler (Cypress veya Playwright)
–	Test coverage raporları
7.	CI/CD Pipeline
–	GitHub Actions veya GitLab CI ile otomatik test ve dağıtım
–	Docker entegrasyonu
Örnek API İstek ve Yanıtları
1. Tüm Todo’ları Listeleme
İstek:
GET /api/todos?page=1&limit=10&sort=due_date&order=asc&status=pending
Yanıt:
{
  "status": "success",
  "data": [
    {
      "id": 1,
      "title": "API Dokümantasyonunu Hazırla",
      "description": "Swagger veya Postman ile API dokümantasyonu oluştur",
      "status": "pending",
      "priority": "high",
      "due_date": "2025-05-10T18:00:00",
      "created_at": "2025-05-01T10:00:00",
      "updated_at": "2025-05-01T10:00:00",
      "categories": [
        {
          "id": 1,
          "name": "Backend",
          "color": "#4A90E2"
        }
      ]
    },
    {
      "id": 2,
      "title": "React Komponentlerini Oluştur",
      "description": "Todo ve form komponentlerini geliştir",
      "status": "pending",
      "priority": "medium",
      "due_date": "2025-05-11T18:00:00",
      "created_at": "2025-05-01T11:30:00",
      "updated_at": "2025-05-01T11:30:00",
      "categories": [
        {
          "id": 2,
          "name": "Frontend",
          "color": "#50E3C2"
        }
      ]
    }
  ],
  "meta": {
    "pagination": {
      "total": 25,
      "per_page": 10,
      "current_page": 1,
      "last_page": 3,
      "from": 1,
      "to": 10
    }
  }
}
2. Yeni Todo Oluşturma
İstek:
POST /api/todos
Content-Type: application/json

{
  "title": "Veritabanı Şemasını Tasarla",
  "description": "Todo uygulaması için gerekli tabloları ve ilişkileri tasarla",
  "status": "pending",
  "priority": "high",
  "due_date": "2025-05-05T18:00:00",
  "category_ids": [1, 3]
}
Yanıt:
{
  "status": "success",
  "message": "Todo başarıyla oluşturuldu",
  "data": {
    "id": 3,
    "title": "Veritabanı Şemasını Tasarla",
    "description": "Todo uygulaması için gerekli tabloları ve ilişkileri tasarla",
    "status": "pending",
    "priority": "high",
    "due_date": "2025-05-05T18:00:00",
    "created_at": "2025-05-02T09:15:00",
    "updated_at": "2025-05-02T09:15:00",
    "categories": [
      {
        "id": 1,
        "name": "Backend",
        "color": "#4A90E2"
      },
      {
        "id": 3,
        "name": "Database",
        "color": "#F5A623"
      }
    ]
  }
}
3. Todo’yu Güncelleme
İstek:
PUT /api/todos/3
Content-Type: application/json

{
  "title": "Veritabanı Şemasını Tasarla ve Migrasyonları Oluştur",
  "description": "Todo uygulaması için gerekli tabloları, ilişkileri ve migrasyon dosyalarını hazırla",
  "status": "in_progress",
  "priority": "high",
  "due_date": "2025-05-06T18:00:00",
  "category_ids": [1, 3]
}
Yanıt:
{
  "status": "success",
  "message": "Todo başarıyla güncellendi",
  "data": {
    "id": 3,
    "title": "Veritabanı Şemasını Tasarla ve Migrasyonları Oluştur",
    "description": "Todo uygulaması için gerekli tabloları, ilişkileri ve migrasyon dosyalarını hazırla",
    "status": "in_progress",
    "priority": "high",
    "due_date": "2025-05-06T18:00:00",
    "created_at": "2025-05-02T09:15:00",
    "updated_at": "2025-05-02T10:30:00",
    "categories": [
      {
        "id": 1,
        "name": "Backend",
        "color": "#4A90E2"
      },
      {
        "id": 3,
        "name": "Database",
        "color": "#F5A623"
      }
    ]
  }
}
4. Todo Durumunu Güncelleme
İstek:
PATCH /api/todos/3/status
Content-Type: application/json

{
  "status": "completed"
}
Yanıt:
{
  "status": "success",
  "message": "Todo durumu başarıyla güncellendi",
  "data": {
    "id": 3,
    "status": "completed",
    "updated_at": "2025-05-02T14:45:00"
  }
}
5. Todo’yu Silme
İstek:
DELETE /api/todos/3
Yanıt:
{
  "status": "success",
  "message": "Todo başarıyla silindi"
}
6. Todo İstatistiklerini Alma (Bonus)
İstek:
GET /api/stats/todos
Yanıt:
{
  "status": "success",
  "data": {
    "pending": 10,
    "in_progress": 5,
    "completed": 15,
    "cancelled": 2,
    "total": 32,
    "overdue": 3
  }
}












