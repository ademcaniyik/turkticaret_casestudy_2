
4.	Frontend İpuçları
–	Custom hook’lar kullanarak API çağrı mantığını ayırın
–	Context API veya Redux ile global state yönetimi sağlayın
–	Form yönetimi için Formik veya React Hook Form kullanın
–	Error boundary’ler ile hata yönetimini iyileştirin



Front-end (React) Detaylı Gereksinimleri
1. Proje Yapısı ve Teknolojiler
•	React Sürümü: React 18.0+
•	State Yönetimi: Redux Toolkit veya Context API
•	Routing: React Router v6+
•	Form Yönetimi: Formik veya React Hook Form
•	Validasyon: Yup veya Zod
•	HTTP İstekleri: Axios
•	UI Kütüphanesi:
–	Tailwind CSS (tercih edilen)
–	MUI (Material-UI)
–	Ant Design
–	Bootstrap
2. Uygulama Özellikleri ve Komponentler
Ana Sayfalar:
1.	Dashboard
–	Özet istatistikler (duruma göre todo sayıları)
–	Yaklaşan bitiş tarihleri olan todo’lar
–	Hızlı durum değiştirme seçenekleri
2.	Todo Listesi Sayfası
–	Filtreleme ve arama özellikleri
–	Sıralama seçenekleri
–	Sayfalama kontrolü
–	Her todo için hızlı durum değiştirme
–	Her todo için düzenleme ve silme işlemleri
3.	Todo Detay/Düzenleme Sayfası
–	Tüm todo alanları için form
–	Kategori seçimi (çoklu seçim)
–	Bitiş tarihi seçimi için tarih seçici
–	Form doğrulama
4.	Kategori Yönetim Sayfası (Bonus)
–	Kategori listesi
–	Kategori ekle/düzenle/sil işlemleri
–	Kategorilere renk atama
Komponentler:
1.	TodoList: Todo’ları listelemek için tablo veya grid görünümü
2.	TodoItem: Tek bir todo’yu göstermek için kart veya liste öğesi
3.	TodoForm: Todo oluşturma/düzenleme formu
4.	TodoFilter: Filtreleme, arama ve sıralama kontrollerini içeren komponent
5.	StatusBadge: Todo durumunu göstermek için renkli rozet
6.	PriorityIndicator: Öncelik seviyesini göstermek için gösterge
7.	Pagination: Sayfalama kontrolleri
8.	CategorySelector: Kategori seçim komponenti (çoklu seçim)
9.	ConfirmationModal: Silme işlemleri için onay modalı
3. Kullanıcı Deneyimi ve Arayüz Tasarımı
•	Responsive Tasarım: Mobil, tablet ve masaüstü görünümleri için uyumluluk
•	Tema Desteği: Açık/koyu tema geçişi
•	Animasyonlar: Geçişlerde ve durum değişimlerinde uygun animasyonlar
•	Loading States: İstek sırasında yükleme göstergeleri
•	Empty States: Veri olmadığında uygun gösterimler
•	Error States: Hata durumlarında uygun mesajlar
•	Toast Notifications: İşlem sonuçları için bildirimler
4. Kod Yapısı ve Kalitesi
•	Komponent Yapısı: Akıllı (container) ve saf (presentation) komponentleri
•	Hook Kullanımı: React Hook’ların etkin kullanımı
•	Kod Bölme (Code Splitting): Büyük bileşenler için lazy loading
•	Performans Optimizasyonu: Gereksiz yeniden renderları önlemek için memo ve useCallback
•	Özel Hook’lar: Yeniden kullanılabilir mantık için özel hook’lar
•	TypeScript (Bonus): Tip güvenliği için TypeScript kullanımı


Front-end Klasör Yapısı (React)
/src
  /components
    /common
      Button.jsx
      Card.jsx
      Modal.jsx
      ...
    /todo
      TodoList.jsx
      TodoItem.jsx
      TodoForm.jsx
      TodoFilter.jsx
      ...
    /category
      CategoryList.jsx
      CategoryForm.jsx
      ...
  /pages
    Dashboard.jsx
    TodoListPage.jsx
    TodoDetailPage.jsx
    ...
  /hooks
    useTodos.js
    useCategories.js
    ...
  /services
    api.js
    todoService.js
    categoryService.js
    ...
  /store
    /slices
      todoSlice.js
      categorySlice.js
      ...
    store.js
  /utils
    formatters.js
    validators.js
    ...
  /assets
    /styles
    /images
  App.jsx
  index.jsx
/public
  index.html
  ...